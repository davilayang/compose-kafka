apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minikube-kafka
  labels: &KafkaDeploymentLabels
    app.kubernetes.io/name: minikube
    app.kubernetes.io/component: kafka
spec:
  selector:
    matchLabels: *KafkaDeploymentLabels
  serviceName: minikube-kafka-headless
  replicas: 3 # in production, you'll want more than 1 for high availability 
  updateStrategy:
        type: RollingUpdate
  template:
    metadata:
      labels: *KafkaDeploymentLabels
    spec:
      securityContext:
        fsGroup: 9092
        runAsUser: 9092
        runAsGroup: 9092
      terminationGracePeriodSeconds: 30
      volumes:
        - name: jaas-config
          secret:
            secretName: minikube-kafka-secrets
            items:
            - key: kafka_server_jaas.conf
              path: kafka_server_jaas.conf
              mode: 0555
      initContainers:
        - name: check-zk
          image: {{ .Values.deployer.image }} # using deployer image for initContainer
          command:
            - 'sh'
            - '-c'
            - |
              COUNTER=0;
              while [  $COUNTER -lt 120 ]; do
                addr=$(nslookup -type=a minikube-zk-client | grep "Address:" | awk 'NR>1 {print $2}')
                if [ ! -z "$addr" ]; then
                  while read -r line; do
                    echo $line;
                    mode=$(echo srvr | nc $line 2181 | grep "Mode");
                    echo $mode;
                    if [ "$mode" = "Mode: leader" ] || [ "$mode" = "Mode: standalone" ]; then
                      echo "Found a leader!";
                      exit 0;
                    fi;
                  done <<EOF
              $addr
              EOF
                fi;
                let COUNTER=COUNTER+1;
                sleep 2;
              done;
              echo "Did NOT see a ZK leader after 240 secs!";
              exit 1;
      containers:
        - name: kafka
          image: "{{ .Values.kafka.image.repo }}:{{ .Values.kafka.image.tag }}" # something like marketplace xxx kafka:2.8
          imagePullPolicy: IfNotPresent
          ports:
            - name: kafka-client
              containerPort: 9092
            - name: kafka-internal
              containerPort: 9093
          env:
            - name: BROKER_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: BROKER_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: STAS_DELAY
              value: "30"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: BROKER_ID_COMMAND
              value: "hostname | sed s/{{ .Release.Name }}-kafka-//"
            - name: KAFKA_LISTENERS
              value: "INTERNAL://$(BROKER_POD_IP):9093,CLIENT://$(BROKER_POD_NAME).{{ .Release.Name }}-kafka-headless.{{ .Release.Namespace }}.svc.cluster.local:9092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INTERNAL://$(BROKER_POD_IP):9093,CLIENT://$(BROKER_POD_NAME).{{ .Release.Name }}-kafka-headless.{{ .Release.Namespace }}.svc.cluster.local:9092"
            - name: KAFKA_LOG_DIRS
              value: "/kafka/logs"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "minikube-zk-client.default.svc.cluster.local:2181" # use "default" for minikube testing
            - name: KAFKA_OPTS
              value: "-Djava.security.auth.login.config=/tmp/kafka_server_jaas.conf"
            - name: KAFKA_SASL_ENABLED_MECHANISMS
              value: "PLAIN"
            - name: KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL
              value: "SASL_PLAINTEXT"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,CLIENT:SASL_PLAINTEXT"
            - name: KAFKA_AUTHORIZER_CLASS_NAME
              value: "kafka.security.auth.SimpleAclAuthorizer"
            - name: KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND
              value: "true"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
          livenessProbe:
            tcpSocket:
              port: kafka-client
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 1
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            tcpSocket:
              port: kafka-client
            initialDelaySeconds: 20
            timeoutSeconds: 5
            failureThreshold: 1
            periodSeconds: 1
            successThreshold: 1
          volumeMounts:
            - name: logdir
              mountPath: /kafka
            - name: jaas-config
              mountPath: /tmp

  volumeClaimTemplates:
    - metadata:
        name: logdir # for zookeeper logs
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: standard
        resources:
          requests:
            storage: 5Gi 
